swagger: "2.0"
info:
  version: "1.0"
  title: "REST-API web-service : channel video hosting"
host: "localhost:8080"
basePath: "/api"
tags:
  - name: "user"
    description: "All available actions for users"
  - name: "channel"
    description: "All available actions for channels"
schemes:
  - "http"

paths:
  /v1/users:
    post:
      tags:
        - "user"
      summary: "creates new user"
      description: "creates new user with provided info"
      operationId: "addUser"
      parameters:
        - in: "body"
          name: "body"
          description: "user object that will be added to app"
          required: true
          schema:
            $ref: '#/definitions/User-input'
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "user was successfully created : return with generated id"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "invalid input"
          schema:
            properties:
              message:
                type: string
                example: "invalid input"
        409:
          description: "that user already exists"
          schema:
            properties:
              message:
                type: "string"
                example: "user with that info already exists"
  /v1/users/{userId}:
   put:
     tags:
       - "user"
     summary: "updates existing user"
     description: "updating existing user by provided info"
     operationId: "updateUser"
     parameters:
       - in: "path"
         name: "userId"
         description: "id to find user to be updated"
         required: true
         type: string
         format: uuid
       - in: "body"
         name: "updateBody"
         description: "that info will replace existing data"
         required: true
         schema:
           $ref: '#/definitions/User-input'
     consumes:
       - "application/json"
     produces:
       - "application/json"
     responses:
       204:
         description: "user was successfully updated"
       404:
         description: "user with that id wasn't found"
         schema:
           properties:
             message :
               type: string
               example: "provided user wasn't found"
       405:
         description: "invalid input"
         schema:
           properties:
             message :
               type: string
               example: "invalid input"
       409:
         description: "that user already exists"
         schema:
           properties:
             message:
               type: "string"
               example: "user with that info already exists"
   patch:
     tags:
       - "user"
     summary: "updates existing user"
     description: "updates user with one of provided field info"
     operationId: "userPatchUpdate"
     parameters:
       - in: "path"
         name: "userId"
         description: "id to find user to be updated"
         required: true
         type: string
         format: uuid
       - in: "body"
         name: "updateBody"
         description: "use one of that fields to replace existing data"
         required: true
         schema:
           $ref: '#/definitions/User-input'
     consumes:
       - "application/json"
     produces:
       - "application/json"
     responses:
       204:
         description: "user was successfully updated"
       404:
         description: "user with that id wasn't found"
         schema:
           properties:
             message:
               type: string
               example: "provided user wasn't found"
       405:
         description: "invalid input"
         schema:
           properties:
             message:
               type: string
               example: "invalid input"
       409:
         description: "that user already exists"
         schema:
           properties:
             message:
               type: "string"
               example: "user with that info already exists"
  /v1/users/{userId}/subscriptions:
    get:
      tags:
        - "user"
      summary: "get subscribed channels names"
      description: "get the names of all the user's channels to which he is subscribed"
      operationId: "get all subscribed channels titles"
      parameters:
        - in: "path"
          name: "userId"
          minimum: 1
          description: "id to find user"
          required: true
          type: string
          format: uuid
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "info was successfully given"
          schema:
            type: array
            items:
              title: "title"
              example: "channel title"
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message:
                type: string
                example: "access denied due to lack of permissions"
        404:
          description: "user with that id wasn't found"
          schema:
            properties:
              message :
                type: string
                example: "provided user wasn't found"
  /v1/users/{userId}/subscriptions/{channelId}:
    post:
      tags:
        - "user"
      summary: "subscribes user to channel"
      description: "subscribes user to specific channel"
      operationId: "subscribeUser"
      produces:
        - application/json
      parameters:
        - in: "path"
          type: string
          format: uuid
          name: "userId"
          required: true
          description: "For this user will be added subscription"
        - in: "path"
          type: integer
          format: int32
          name: "channelId"
          required: true
          description: "This channel will be subscribed"
      responses:
        201:
          description: User subscribed to channel
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message :
                type: string
                example: "access denied due to lack of permissions"
        404:
          description: "provided channel wasn't found"
          schema:
            properties:
              message :
                type: string
                example: "provided channel wasn't found"
        409:
          description: "already subscribed"
          schema:
            properties:
              message:
                type: "string"
                example: "user already have subscribed"
    delete:
      tags:
        - "user"
      summary: "unsubscribes user from channel"
      description: "unsubscribes user from specific channel"
      operationId: "unsubscribeUser"
      produces:
        - application/json
      parameters:
        - in: "path"
          type: string
          format: uuid
          name: "userId"
          required: true
          maximum: 1
          description: "For this user will be deleted subscription"
        - in: "path"
          type: integer
          format: int32
          name: "channelId"
          required: true
          maximum: 1
          description: "This channel will be unsubscribed"
      responses:
        204:
          description: "channel was successfully unsubscribed"
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message:
                type: string
                example: "access denied due to lack of permissions"
        404:
          description: "subscription wasn't found"
          schema:
            properties:
              message:
                type: "string"
                example: "subscription wasn't found"

  /v1/channels:
    post:
      tags:
        - "channel"
      summary: "creates new channel"
      description: "creates channel with provided info"
      operationId: "addChannel"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "channelInfo"
          description: "Channel object that will be added to app"
          required: true
          schema:
            $ref: '#/definitions/Channel-input'
      responses:
        201:
          description: "channel was successfully created"
          schema:
            $ref: '#/definitions/Channel'
        400:
          description: "invalid input"
          schema:
            properties:
              message:
                type: string
                example: "invalid input"
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message:
                type: string
                example: "access denied due to lack of permissions"
        409:
          description: "that channel already exists"
          schema:
            properties:
              message:
                type: "string"
                example: "that channel already exists"
    get:
      tags:
        - "channel"
      summary: "List of channels using filtration and pagination"
      description: "get list of channels with filtration and pagination"
      operationId: "channelList"
      parameters:
        - in: "query"
          name: page
          type: integer
          format: int64
          minimum: 1
          description: number of page
        - in: "query"
          name: size
          type: integer
          format: int64
          minimum: 1
          description: size of page
        - in: "query"
          name: title
          type: string
          description: query path param for filter
        - in: "query"
          name: language
          type: string
          description: query path param for filter
        - in: "query"
          name: category
          type: string
          description: query path param for filter
      responses:
        200:
          description: List of channels
          schema:
            type: array
            items:
              $ref: '#/definitions/ChannelSummary'
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message:
                type: string
                example: "access denied due to lack of permissions"

  /v1/channel/{channelId}:
    put:
      tags:
        - "channel"
      summary: "updates existing channel"
      description: "updates channel with provided info"
      operationId: "channelUpdate"
      parameters:
        - in: "path"
          name: "channelId"
          minimum: 1
          description: "id to find channel to be updated"
          required: true
          type: integer
          format: int32
        - in: "body"
          name: "updateBody"
          description: "that info will replace existing data"
          required: true
          schema:
            $ref: '#/definitions/Channel-input'
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        204:
          description: "channel was successfully updated"
        400:
          description: "invalid input for update"
          schema:
            properties:
              message:
                type: string
                example: "invalid input"
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message:
                type: string
                example: "access denied due to lack of permissions"
        404:
          description: "channel with that id wasn't found"
          schema:
            properties:
              message:
                type: "string"
                example: "provided channel wasn't found"
    patch:
      tags:
        - "channel"
      summary: "updates existing channel"
      description: "updates channel with one of provided field info"
      operationId: "channelPatchUpdate"
      parameters:
        - in: "path"
          name: "channelId"
          minimum: 1
          description: "id to find channel to be updated"
          required: true
          type: integer
          format: int32
        - in: "body"
          name: "updateBody"
          description: "use one of the fields to update existing channel"
          required: true
          schema:
            $ref: '#/definitions/Channel-input'
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        204:
          description: "channel was successfully updated"
        400:
          description: "invalid input for update"
          schema:
            properties:
              message:
                type: string
                example: "invalid input"
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message:
                type: string
                example: "access denied due to lack of permissions"
        404:
          description: "channel with that id wasn't found"
          schema:
            properties:
              message:
                type: "string"
                example: "provided channel wasn't found"
    get:
      tags:
        - "channel"
      summary: "get channel"
      description: "get info about specific channel"
      operationId: "getChannel"
      parameters:
        - in: "path"
          name: "channelId"
          minimum: 1
          description: "id to find channel"
          required: true
          type: integer
          format: int32
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "info was successfully given"
          schema:
            $ref: "#/definitions/Channel"
        403:
          description: "access denied due to lack of permissions"
          schema:
            properties:
              message:
                type: string
                example: "access denied due to lack of permissions"
        404:
          description: "channel with that id wasn't found"
          schema:
            properties:
              message:
                type: "string"
                example: "channel with that id wasn't found"

definitions:
    Channel:
      type: object
      required:
        - title
        - shortDescription
        - category
        - avatar
        - language
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Film review
        author:
          $ref: '#/definitions/User'
        subscribers:
          $ref: '#/definitions/UserArray'
        shortDescription:
          type: string
          example: Here you can track all latest reviews
        creationDate:
          type: string
          format: date-time
          example: '2022-12-12'
        category:
          $ref: '#/definitions/Category'
        language:
          type: string
          example: RU
        avatar:
          format: byte
      xml:
        name: channel
    Channel-input:
      required:
        - title
        - shortDescription
        - category
        - language
        - avatar
      properties:
          title:
            type: string
            example: "Film review"
          shortDescription:
            type: string
            example: "Here you can track all latest reviews"
          category:
            type: string
            example: "Film"
          language:
            type: string
            example: "RU"
          avatar:
            format: byte
      xml:
        name: channel-input
    User-input:
      type: object
      required:
        - nickname
        - name
        - email
      properties:
        nickname:
          type: string
          example: meshicage
        name:
          type: string
          example: Vlad
        email:
          type: string
          format: email
          example: meshicage@yandex.ru
      xml:
        name: user
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 11a32b4f-8ff0-4676-830c-986b90a4b7df
        nickname:
          type: string
          example: meshicage
        name:
          type: string
          example: Vlad
        email:
          type: string
          format: email
          example: meshicage@yandex.ru
      xml:
        name: user
    Category:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: FILM
      xml:
        name: category
    UserArray:
      type: array
      xml:
        wrapped: true
        name: array
      items:
        $ref: '#/definitions/User'
    ChannelSummary:
      type: object
      properties:
        title:
          type: string
          example: Film review
        subscribersCount:
          type: integer
          format: int64
          example: 120
        category:
          $ref: '#/definitions/Category'
        language:
          type: string
          example: RU
        avatar:
          format: byte